header.jumbotron.subhead#overview
  h1 noduino
  p.lead A simple and flexible JavaScript and Node.js Framework for accessing basic Arduino controls from Web Applications using HTML5, Socket.IO and Node.js.
.row.marketing#homeBoxes
  .span4
    img.bs-icon(src="images/glyphicons_155_show_thumbnails.png")
    h2 Easy Arduino Access
    p Initialize your Arduino board, define registered pins and send commands. Use digital and analog read or write to control buttons or switch connected LEDs. <strong>Listen for events</strong> happening on your Arduino to control your Web Application with analog controls…
  .span4
    img.bs-icon(src="images/glyphicons_214_resize_small.png")
    h2 Client and Server in JS
    p Thanks to Node.js and modern web browsers all server code as well as all client code is written in JavaScript. There is no difference in accessing your Arduino over <strong>WebSocket</strong> or a <strong>Serial</strong> connection. All methods and objects remain the same, written code is highly portable.
  .span4
    img.bs-icon(src="images/glyphicons_009_magic.png")
    h2 JS Proof of Concept
    p The first release of 
      a(href="") noduino
      |  is build for fun and as a proof of concept. For no good reason I tried sending commands to my Arduino with <strong>JavaScript</strong> using a nice <strong>HTML5</strong> interface. Imagine controlling browser games with an old NES game pad!    
section#homeContent
  .page-header
    h1 Connect HTML Interface to Arduino
  .row
    .span3
      p Make sure your 
        strong Arduino
        |  is connected with your computer, this commands works fine for me:
    .span9
      pre.prettyprint.linenums=examples.basics
  .row
    .span3
      p 
        a(href="https://github.com/semu/noduino") Download noduino
        | , install needed packages with npm, fetch git submodules, upload duino's file <code>duino/src/du.ino</code> to your Arduino and you are good to go. An example on how to catch and fire events with an HTML interface is provided as well. Take a look at 
        a(href="example-walkLED.html") LED Walker
        | .
    .span9
      pre.prettyprint.linenums=examples.node
  .row
    .span3
      p See the included examples on this page or have a look at the example wiring for firing and catching events on your Arduino!
    .span9
      pre.prettyprint.linenums=examples.connect
  .row.example
    .span12#e1-exampleConnection
      p
        a.btn(href="#")#e1-buttonConnect
          i.icon-refresh
          |  Connect to Arduino
      .alert.alert-info Please connect to your Arduino using the button.
      .alert.hide.alert-error Unable to connect to Arduino!
      .alert.hide.alert-success Connection to Arduino established!
  .page-header
    h1 Switching LED modes 
      small  Simple methods for switching LED modes, blinking and fading…
  .row
    .span3
      p When using the example from above to connect to your 
        strong Arduino
        |  it is very easy to 
        strong toggle an LED
        |  connected to a pin on you board. All data exchange between the web browser and server is handled with Socket.IO, on the server commands are send to Arduino using 
        a(href="https://github.com/ecto/duino") duino.
        |  
        strong Noduino
        |  enables 
        strong Real-Time Arduino
        |  control using WebSockets! Please see the 
        a(href="#communication") communication schema
        |  to get how it works…
    .span9
      pre.prettyprint.linenums=examples.toggleLED
  .row.example
    .span12#e2-exampleConnection
      p
        a.btn(href="#")#e2-buttonConnect
          i.icon-refresh
          |  Connect to Arduino
      .alert.alert-info Please connect to your Arduino using the button.
      .alert.hide.alert-error Unable to connect to Arduino!
      .alert.hide.alert-success Connection to Arduino established!
    .span12#e2-secondStep
      p
        select.span2#e2-pinValue
          option(value=13) PIN: 13
          option(value=12) PIN: 12
          option(value=11) PIN: 11
          option(value=10) PIN: 10
          option(value=09) PIN: 09
        input.span3#e2-interval(type="text",placeholder="Interval in Miliseconds") 
        |  
        a.btn(href="#", style="margin-top: 1px;")#e2-buttonStart
          i.icon-retweet
          |  Start blinking LED 
        |  
        a.btn(href="#", style="margin-top: 1px;")#e2-buttonStop
          i.icon-off
          |  Stop 
        |          
        label.label#e2-status(style="position: relative; top: -2px;") LED off
      .alert.hide.alert-info Please connect to your Arduino using the button.
      .alert.hide.alert-error Connect to Arduino first!
      .alert.hide.alert-success Connection to Arduino established!
  .page-header
    h1 Listening for Events on Arduino 
      small  Catch a button push event and fade on your LED
  .row
    .span3
      p Buttons and LEDs provide a simple interface to listen for events. Use <code>Button.on()</code> or <code>LED.on()</code> for triggering your code if a button is pushed or your LED is switching modes. Multiple events for a single event are called the order they have been assigned.
      p Use <code>Board.receive()</code> for catching all incoming data streams. You probably need this if you plan to create a <strong>Real-Time Web Application</strong> with noduino. Buzzword...
    .span9
      pre.prettyprint.linenums=examples.listenButton
  .row.example
    .span12#e3-exampleConnection
      p
        a.btn(href="#")#e3-buttonConnect
          i.icon-refresh
          |  Connect to Arduino
      .alert.alert-info Please connect to your Arduino using the button. 
      .alert.hide.alert-error Unable to connect to Arduino!
      .alert.hide.alert-success Connected! Button is <label class="label" id="buttonStatus">not pushed</label>
  .page-header
    h1 Getting started with noduino 
      small  AnalogInput, DigitalInputs and some nice LEDs
  .row
    .span12
      .hero-unit
        img(src="wiring/walkLED.png")
      p Use the example wiring from above and the provided code in  
        code examples/walkLED.js
        |  for getting started using noduino. Read values from an analog input device like a potentiometer and watch for pressed buttons, all basic functions are shown in the example files. The needed 
        code .fzz
        |  file for making changes with the awesome 
        a(href="http://fritzing.org") Fritzing Application
        |  is included as well! If you create other wirings or find bugs in the provided ones please create a 
        a(href="http://github.com/semu/noduino") Pull Request on GitHub
        | !
  .row
    .span12
      p.exampleLinks
        a.btn.btn-success(href="example-walkLED.html")
          i.icon-gift.icon-white
          |  View Example
  .page-header
    h1 About noduino 
      small  Thank You Open Source!
  .row
    .span12
      p The 
        a(href="https://github.com/semu/noduino") noduino
        |  project was founded by 
        a(href="http://semu.mp") Sebastian Müller
        |  in 2012 for fun and as a proof of concept for Node.js controlling external components over a dynamic web interface using HTML5 WebSockets. Thanks to the awesome 
        a(href="http://arduino.cc/") Arduino
        |  project and the German 
        a(href="http://fritzing.org") Fritzing Project
        |  it's easy to get started with basic prototyping. The already existing 
        a(href="https://github.com/ecto/duino") duino
        |  project helped developing the first steps and is now an imported part of noduino's core components. Thanks to the Open Source community, you made this possible. Keep up the good work!
      p Some might think <em>What the f*ck is happening here? Are you insane?</em> But I can assure you I'm not crazy, my mom had me tested…
      p Please keep in mind Noduino is in a very early development state, all code is highly alpha and you should not build something serious on it. There are several known bugs, if you run into any problems with the provided examples just restart Noduino and try again ;) Did I mention is an early alpha version?
